
import os
import subprocess


# Function to check if ffmpeg is installed
def is_ffmpeg_installed():
    try:
        subprocess.run(['ffmpeg', '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        return True
    except subprocess.CalledProcessError:
        return False


# Function to download a single video in 720p or the best available quality with audio
def download_video(video_url, output_dir):
    try:
        # Check if ffmpeg is installed
        if not is_ffmpeg_installed():
            print("Warning: ffmpeg is not installed. The video and audio will not be merged.")
            command = [
                'yt-dlp',
                '-f', 'bestvideo[height<=720]+bestaudio/best[height<=720]',
                # Filter for 720p or best available quality with audio
                '-o', os.path.join(output_dir, '%(title)s.%(ext)s'),  # Output file template
                video_url
            ]
        else:
            command = [
                'yt-dlp',
                '-f', 'bestvideo[height<=720]+bestaudio/best[height<=720]',
                # Filter for 720p or best available quality with audio
                '--merge-output-format', 'mp4',  # Merge video and audio into mp4 format
                '-o', os.path.join(output_dir, '%(title)s.%(ext)s'),  # Output file template
                video_url
            ]

        subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error downloading video {video_url}: {e}")


# Function to download videos from a playlist using yt-dlp
def download_playlist(playlist_url, start_index, end_index, output_dir):
    try:
        # Use yt-dlp to list video IDs in the playlist
        command = [
            'yt-dlp',
            '--flat-playlist',  # List video URLs without downloading
            '--get-id',
            playlist_url
        ]
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        video_ids = result.stdout.splitlines()

        print(f'Number of videos in playlist: {len(video_ids)}')

        # Ensure the output directory exists
        os.makedirs(output_dir, exist_ok=True)

        # Download videos in the specified range
        for i in range(start_index - 1, min(end_index, len(video_ids))):
            video_url = f"https://www.youtube.com/watch?v={video_ids[i]}"
            print(f"Downloading video {i + 1} of {len(video_ids)}: {video_url}")
            download_video(video_url, output_dir)

    except subprocess.CalledProcessError as e:
        print(f"An error occurred while processing the playlist: {e}")


# Example usage
playlist_url = input("Enter the YouTube playlist URL: ")
start_index = int(input('Enter the start index of the range: '))
end_index = int(input('Enter the end index of the range: '))
output_dir = input("Enter the directory where videos should be saved: ")

download_playlist(playlist_url, start_index, end_index, output_dir)



